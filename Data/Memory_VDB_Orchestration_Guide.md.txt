📄 Memory_VDB_Orchestration_Guide.md.txt (Finalized v1.2)
sql
Copy
Edit
🧠 MEMORY VDB — SYSTEM ORCHESTRATION GUIDE
─────────────────────────────────────────────
Version: v1.2  
Owner: [You]  
Generated by: ChatGPT (Gina)  
Last Updated: 2025-04-24  
Purpose: Master reference for how to operate, rebuild, and orchestrate the full Memory VDB system.

─────────────────────────────────────────────
📌 SYSTEM PURPOSE

Memory VDB is a modular, self-maintaining memory engine built for GPT-based agents.  
It:
- Parses and stores AI memory over time
- Summarizes, deduplicates, and tags memory locally
- Syncs with Drive (optional), indexes with FAISS
- Enables semantic search, context-aware updates, and autonomous reflection

This system evolves memory — it does not overwrite it blindly.

─────────────────────────────────────────────
📂 CORE COMPONENT INDEX

| File / Step                | Purpose |
|---------------------------|---------|
| `Memory_VDB_Spec_v1.md`       | Full architecture spec and system rules |
| `step2_input_writer.py`       | Prepares LLaMA input + dedup logic |
| `llama_postprocess.py`        | Cleans and validates LLaMA output |
| `save_manager.py`             | Executes memory actions (append/replace/archive) |
| `drive_upload.py`             | Uploads files to Google Drive (optional) |
| `ingest.py`                   | Ingests memory into FAISS vector database |
| `retry_runner.py`             | DAG-safe retry handler for failed tasks |
| `bop_runner.py`               | Full pipeline automation |
| `watchdog.py`                 | Detects stale/zombie tasks |
| `semantic_diff.py`            | Compares new vs old memory for value/POV shifts |
| `memory_query.py`             | Queries memory semantically |
| `scheduler.py`                | Runs retry/ingest/upload automatically |
| `agent_loop.py`               | Agent reflects, reroutes, and evolves memory autonomously |

─────────────────────────────────────────────
🔄 SYSTEM FLOW (ORDER OF OPERATIONS)

GPT generates content → step2_input_writer.py → llama_postprocess.py
→ semantic_diff.py → save_manager.py
→ drive_upload.py → ingest.py
→ memory_query.py (search)
→ retry_runner.py + watchdog.py (safety)
→ agent_loop.py (autonomous updates)
→ scheduler.py (background runner)

markdown
Copy
Edit

─────────────────────────────────────────────
🧠 GPT USAGE GUIDE

GPT is allowed to:
- Trigger `bop_runner.py` with memory inputs
- Query memory with `query.py` (or direct `memory_query.py`)
- Run reflection via `agent_loop.py`
- Schedule retry/ingest via `scheduler.py`
- Review health using `watchdog.py`

GPT is NOT allowed to:
- Write directly to memory files
- Skip `semantic_diff.py`
- Overwrite existing files
- Modify `task_queue.json` directly (use retry_runner or agent loop)

─────────────────────────────────────────────
🛡️ SYSTEM SAFETY RULES

✅ All writes go through Save Manager  
✅ All memory updates must pass diff validation  
✅ All failed tasks are tracked in `task_queue.json`  
✅ Retry logic is capped, DAG-safe, and monitored  
✅ Memory is versioned (archive + replace is never destructive)

─────────────────────────────────────────────
♻️ RECOVERY + REBUILD PROTOCOL

If system memory is lost or corrupted:
- Reload all `.md.txt` files in this folder
- Use `bop_runner.py` to re-run memory batches
- Use `watchdog.py` and `retry_runner.py` to restore task queue health
- Re-ingest memory using `ingest.py`

If GPT loses context:
> Re-upload this file + all `.md.txt` spec files  
> Say: “Continue Memory VDB. Files uploaded. Resume orchestration.”

─────────────────────────────────────────────
📦 FOLDER STRUCTURE EXPECTED

Memory_VDB/ ├── Data/ (live memory) │ ├── Core/ │ ├── Meta/ │ ├── Projects/ │ └── Archive/ ├── VDB_Templates/ (FAISS index folders) ├── logs/ │ ├── upload_log.json │ ├── memory_changelog.json │ ├── agent_log.json │ ├── query_logs.json │ └── scheduler_log.json ├── ingest_hash.json ├── input_hash.json ├── task_queue.json ├── paths.json

pgsql
Copy
Edit

─────────────────────────────────────────────
✅ FINAL NOTES

This file should be the **first file loaded by any GPT** tasked with rebuilding or maintaining the Memory VDB system.

No part of the system should operate in isolation — all updates flow through structured layers.  
This keeps memory additive, semantic, recoverable, and agent-aware.

─────────────────────────────────────────────